import {Users}  from '../models/models.js'import ApiError from '../error/apiError.js'import jwt from "jsonwebtoken";import bcrypt from 'bcrypt'class UsersController {	async registration(req, res, next) {		const {email, password} = req.body;		const candidate = await Users.findOne({where: {email}});		if(!candidate) return next(ApiError.badRequest('Пользователь с таким email уже существует'));		const hashedPassword = await bcrypt.hash(password, 5);		const user = await Users.create({email, password: hashedPassword});		const token = UsersController.#generateJwt(user.id, email, user.role);		return res.json({token})	}	async login(req,res, next) {		const {email, password} = req.body;		const user = await Users.findOne({where: {email}});		if(!user) return next(ApiError.badRequest('Неверный логин или пароль'));		let comparePassword = bcrypt.compareSync(password, user.password);		if(!comparePassword) return next(ApiError.badRequest('Неверный логин или пароль'));		const token = UsersController.#generateJwt(user.id, email, user.role);		return res.json({token});	}	async me(req, res) {		return res.json(req.user);	}	static #generateJwt (id, email, role) {		return jwt.sign({id, email, role}, process.env.SECRET_KEY, {			expiresIn: '24h'		})	}}export const usersController = new UsersController();